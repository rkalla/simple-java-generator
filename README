Simple Java Generator (SJG)
https://github.com/thebuzzmedia/simple-java-generator


Changelog
---------
1.2
	* Changed IGenerate.generate return type from a StringBuilder to an 
	IInput<char[], char[]>. Allows much more optimized interaction with the
	generated result (e.g. streaming) without needing to create a String or
	char[] and copy the contents of the existing char[] again.
	
	* Optimized cached indent lookup calculation to avoid the new Integer 
	creation.

1.1
	* Initial public release.


License
-------
This library is released under the Apache 2 License. See LICENSE.


Description
-----------
TBD


Performance
-----------
Benchmarks can be reproduced by running the Benchmark class in the /src/test/java
code tree.

NOTE: While Simple Java Generator only requires Java 5 to run the bytecode 
generated by compiling the library, the test classes use classes that require
Java 6 JRE libraries to run (namely JAXB). It is easiest to run the /src/test
classes with Java 6, but SJG itself runs fine in a Java 5 environment.

Benchmarks compare some of the most common approaches to Object->JSON and 
Object->XML text generation; namely Gson for JSON and JAXB from Java 6 for XML.

[Platform]
* Java 1.6.0_24 on Windows 7 64-bit 
* Dual Core Intel E6850 processor
* 8 GB of ram

==== Benchmarking 50000 iterations ====

[JSON]
	 Gson, Formatted... 7437 ms (7.437 secs - 6723 ops/sec)
	 Gson, Compact... 5038 ms (5.038 secs - 9924 ops/sec)
	 Simple Gen, Formatted... 1492 ms (1.492 secs - 33512 ops/sec)
	 Simple Gen, Compact... 552 ms (0.552 secs - 90579 ops/sec)

[XML]
	 JAXB, Formatted... 1555 ms (1.555 secs - 32154 ops/sec)
	 JAXB, Compact... 954 ms (0.954 secs - 52410 ops/sec)
	 Simple Gen, Formatted... 1918 ms (1.918 secs - 26068 ops/sec)
	 Simple Gen, Compact... 701 ms (0.701 secs - 71326 ops/sec)



Example
-------

TBD (note about IRecursable)
 

How it Works
------------
TBD


Memory/CPU Overhead
-------------------
TBD (note about indent and reflection caching)


Runtime Requirements
--------------------
Requires
	* tbm-common-lib-<VER>.jar


History
-------
This project, like many others, was open-sourced from work on imgscalr.com.

imgscalr.com is a REST API driven, image-hosting SaaS product. Interaction with
the product is done almost exclusively via the web API. Generation of JSON, JSONP
or XML from resulting query POJOs inside the system is the most common operation
the deployed system performs so it has to be fast.

After evaluating popular frameworks out there, I found some to be way too slow
(Gson) and while other frameworks were fast (Jackson) the APIs made usage complex
or the resulting output reflected from the POJO objects wasn't exactly what I 
needed and customization was harder than I thought it should be.

Wanting a straight forward, fast and *simple* approach was important, so SJG
was written and open sourced to the community. 


Troubleshooting
---------------
Here are some issues you might run into and what you can do to correct it.

* Simple Java Generator isn't recursing into the custom member classes on my
	POJO, it just prints out the toString() result!
	
	You probably forgot to have any and all custom POJO classes implement the
	IRecursable interface. This interface "tags" custom classes as something that
	SJG should use reflection to recurse into to pull values out of. Without it,
	you are telling SJG to leave those classes alone.
		 

Contact
-------
If you have questions, comments or bug reports for this software please contact
us at: software@thebuzzmedia.com